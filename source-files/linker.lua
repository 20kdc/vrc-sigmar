#!/usr/bin/env lua
local mode = ...
local c = mode == "c"

local board = {
	"     * * * * * *",
	"    * * * * * * *",
	"   * * * * * * * *",
	"  * * * * * * * * *",
	" * * * * * * * * * *",
	"* * * * * * * * * * *",
	" * * * * * * * * * *",
	"  * * * * * * * * *",
	"   * * * * * * * *",
	"    * * * * * * *",
	"     * * * * * *"
}
local points = {}
local ptExist = {}
local function ptExists(x, y)
	return ptExist[tostring(x) .. "_" .. tostring(y)]
end
for y, v in ipairs(board) do
	for x = 1, #v do
		if v:sub(x, x) == "*" then
			ptExist[tostring(x) .. "_" .. tostring(y)] = #points
			table.insert(points, {x = x, y = y})
		end
	end
end

local tableTotal = ""
if c then
	tableTotal = "/* Auto-generated by linker.lua */\n"
	tableTotal = tableTotal .. "#define MARBLE_COUNT " .. tostring(#points) .. "\n"
	tableTotal = tableTotal .. "enum {\n"
	tableTotal = tableTotal .. "\tDIR_NW = 0,\n"
	tableTotal = tableTotal .. "\tDIR_NE = 1,\n"
	tableTotal = tableTotal .. "\tDIR_E = 2,\n"
	tableTotal = tableTotal .. "\tDIR_SE = 3,\n"
	tableTotal = tableTotal .. "\tDIR_SW = 4,\n"
	tableTotal = tableTotal .. "\tDIR_W = 5,\n"
	tableTotal = tableTotal .. "\tDIR_COUNT = 6\n"
	tableTotal = tableTotal .. "};\n"
	tableTotal = tableTotal .. "typedef struct phyto_marble {\n"
	tableTotal = tableTotal .. "\tsigned char n[6];\n"
	tableTotal = tableTotal .. "} phyto_marble_t;\n"
	tableTotal = tableTotal .. "#ifndef PHYTO_IMPL\n"
	tableTotal = tableTotal .. "#ifdef PHYTOLAB\n"
	tableTotal = tableTotal .. "extern const char board_layout_str[];\n"
	tableTotal = tableTotal .. "#endif\n"
	tableTotal = tableTotal .. "extern const phyto_marble_t board_layout[MARBLE_COUNT];\n"
	tableTotal = tableTotal .. "extern int game_state[MARBLE_COUNT];\n"
	tableTotal = tableTotal .. "#else\n"
	tableTotal = tableTotal .. "#ifdef PHYTOLAB\n"
	tableTotal = tableTotal .. "const char board_layout_str[] = \""
	for _, v in ipairs(board) do
		for i = 1, #v do
			tableTotal = tableTotal .. v:sub(i, i)
		end
		tableTotal = tableTotal .. "\\n"
	end
	tableTotal = tableTotal .. "\";\n"
	tableTotal = tableTotal .. "#endif\n"
	tableTotal = tableTotal .. "const phyto_marble_t board_layout[MARBLE_COUNT] = {\n"
end
for k, v in ipairs(points) do
	if c then
		tableTotal = tableTotal .. "\t{ .n = { "
	end
	local function tryWr(ox1, oy1)
		local p1 = ptExists(v.x + ox1, v.y + oy1) or -1
		if c then
			tableTotal = tableTotal .. tostring(p1) .. ", "
		else
			tableTotal = tableTotal .. tostring(p1) .. " "
		end
	end
	tryWr(-1, -1)
	tryWr(1, -1)
	tryWr(2, 0)
	tryWr(1, 1)
	tryWr(-1, 1)
	tryWr(-2, 0)
	if c then
		tableTotal = tableTotal .. "}},\n"
	end
end
if c then
	tableTotal = tableTotal .. "};\n"
	tableTotal = tableTotal .. "int game_state[MARBLE_COUNT];\n"
	tableTotal = tableTotal .. "#endif\n"
end
print(tableTotal)
